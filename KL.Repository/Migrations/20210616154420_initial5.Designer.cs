// <auto-generated />
using System;
using KL.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KL.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210616154420_initial5")]
    partial class initial5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KL.Domain.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AlphaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CodArea1")
                        .HasColumnType("int");

                    b.Property<int>("CodArea2")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PhoneNumber1")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber2")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("KL.Domain.CustomerscheduleService", b =>
                {
                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerscheduleServiceCustomersId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerscheduleServiceScheduleServiceId")
                        .HasColumnType("int");

                    b.HasKey("CustomersId", "ScheduleServiceId");

                    b.HasIndex("ScheduleServiceId");

                    b.HasIndex("CustomerscheduleServiceCustomersId", "CustomerscheduleServiceScheduleServiceId");

                    b.ToTable("CustomerscheduleServices");
                });

            modelBuilder.Entity("KL.Domain.Provinces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlphaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Territory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("KL.Domain.ScheduleService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.ToTable("ScheduleService");
                });

            modelBuilder.Entity("KL.Domain.CustomerscheduleService", b =>
                {
                    b.HasOne("KL.Domain.Customers", "Client")
                        .WithMany("CustomerscheduleServices")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KL.Domain.ScheduleService", "ScheduleService")
                        .WithMany()
                        .HasForeignKey("ScheduleServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KL.Domain.CustomerscheduleService", null)
                        .WithMany("CustomerscheduleServices")
                        .HasForeignKey("CustomerscheduleServiceCustomersId", "CustomerscheduleServiceScheduleServiceId");

                    b.Navigation("Client");

                    b.Navigation("ScheduleService");
                });

            modelBuilder.Entity("KL.Domain.ScheduleService", b =>
                {
                    b.HasOne("KL.Domain.Customers", null)
                        .WithMany("SchedulesServices")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KL.Domain.Customers", b =>
                {
                    b.Navigation("CustomerscheduleServices");

                    b.Navigation("SchedulesServices");
                });

            modelBuilder.Entity("KL.Domain.CustomerscheduleService", b =>
                {
                    b.Navigation("CustomerscheduleServices");
                });
#pragma warning restore 612, 618
        }
    }
}
